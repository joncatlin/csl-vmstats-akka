//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILanguageListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class LanguageBaseListener : ILanguageListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] LanguageParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] LanguageParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] LanguageParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] LanguageParser.LineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.vm_selection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVm_selection([NotNull] LanguageParser.Vm_selectionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.vm_selection"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVm_selection([NotNull] LanguageParser.Vm_selectionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.analysis"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnalysis([NotNull] LanguageParser.AnalysisContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.analysis"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnalysis([NotNull] LanguageParser.AnalysisContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.stats_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStats_name([NotNull] LanguageParser.Stats_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.stats_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStats_name([NotNull] LanguageParser.Stats_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.route"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRoute([NotNull] LanguageParser.RouteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.route"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRoute([NotNull] LanguageParser.RouteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.end_point"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnd_point([NotNull] LanguageParser.End_pointContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.end_point"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnd_point([NotNull] LanguageParser.End_pointContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
