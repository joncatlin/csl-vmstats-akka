//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from vmstats.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class vmstatsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, ID=9, 
		WS=10;
	public const int
		RULE_transform_pipeline = 0, RULE_transform = 1, RULE_parameter = 2, RULE_combine = 3, 
		RULE_metric_name = 4, RULE_transform_name = 5, RULE_parameter_name = 6, 
		RULE_value_name = 7;
	public static readonly string[] ruleNames = {
		"transform_pipeline", "transform", "parameter", "combine", "metric_name", 
		"transform_name", "parameter_name", "value_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "':'", "'{'", "','", "'}'", "'='", "'('", "')'", null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "vmstats.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static vmstatsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public vmstatsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public vmstatsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Transform_pipelineContext : ParserRuleContext {
		public Metric_nameContext metric_name() {
			return GetRuleContext<Metric_nameContext>(0);
		}
		public TransformContext[] transform() {
			return GetRuleContexts<TransformContext>();
		}
		public TransformContext transform(int i) {
			return GetRuleContext<TransformContext>(i);
		}
		public Transform_pipelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_pipeline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterTransform_pipeline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitTransform_pipeline(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_pipeline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_pipelineContext transform_pipeline() {
		Transform_pipelineContext _localctx = new Transform_pipelineContext(Context, State);
		EnterRule(_localctx, 0, RULE_transform_pipeline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; metric_name();
			State = 17; Match(T__0);
			State = 18; transform();
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 19; Match(T__1);
				State = 20; transform();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		public Transform_nameContext transform_name() {
			return GetRuleContext<Transform_nameContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterTransform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitTransform(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 2, RULE_transform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; transform_name();
			{
			State = 24; Match(T__2);
			State = 25; parameter();
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 26; Match(T__3);
				State = 27; parameter();
				}
			}

			State = 30; Match(T__4);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Value_nameContext value_name() {
			return GetRuleContext<Value_nameContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; parameter_name();
			State = 33; Match(T__5);
			State = 34; value_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombineContext : ParserRuleContext {
		public Transform_pipelineContext[] transform_pipeline() {
			return GetRuleContexts<Transform_pipelineContext>();
		}
		public Transform_pipelineContext transform_pipeline(int i) {
			return GetRuleContext<Transform_pipelineContext>(i);
		}
		public CombineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterCombine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitCombine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombineContext combine() {
		CombineContext _localctx = new CombineContext(Context, State);
		EnterRule(_localctx, 6, RULE_combine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(T__6);
			State = 37; transform_pipeline();
			State = 38; Match(T__3);
			State = 39; transform_pipeline();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 40; Match(T__3);
				State = 41; transform_pipeline();
				}
			}

			State = 44; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Metric_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(vmstatsParser.ID, 0); }
		public Metric_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metric_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterMetric_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitMetric_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetric_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Metric_nameContext metric_name() {
		Metric_nameContext _localctx = new Metric_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_metric_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(vmstatsParser.ID, 0); }
		public Transform_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterTransform_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitTransform_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_nameContext transform_name() {
		Transform_nameContext _localctx = new Transform_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_transform_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(vmstatsParser.ID, 0); }
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(vmstatsParser.ID, 0); }
		public Value_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.EnterValue_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IvmstatsListener typedListener = listener as IvmstatsListener;
			if (typedListener != null) typedListener.ExitValue_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvmstatsVisitor<TResult> typedVisitor = visitor as IvmstatsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_nameContext value_name() {
		Value_nameContext _localctx = new Value_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_value_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\x39', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x18', '\n', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x1F', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '-', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x2', '\x2', '\x2', '\x33', '\x2', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\f', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x34', '\x3', '\x2', '\x2', '\x2', '\x10', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\x5', '\n', '\x6', '\x2', '\x13', 
		'\x14', '\a', '\x3', '\x2', '\x2', '\x14', '\x17', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x16', '\a', '\x4', '\x2', '\x2', '\x16', '\x18', '\x5', 
		'\x4', '\x3', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\x5', '\f', '\a', '\x2', '\x1A', '\x1B', '\a', 
		'\x5', '\x2', '\x2', '\x1B', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1C', 
		'\x1D', '\a', '\x6', '\x2', '\x2', '\x1D', '\x1F', '\x5', '\x6', '\x4', 
		'\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\a', '\a', '\x2', '\x2', '!', '\x5', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x5', '\xE', '\b', '\x2', '#', '$', '\a', '\b', '\x2', '\x2', '$', 
		'%', '\x5', '\x10', '\t', '\x2', '%', '\a', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\a', '\t', '\x2', '\x2', '\'', '(', '\x5', '\x2', '\x2', '\x2', 
		'(', ')', '\a', '\x6', '\x2', '\x2', ')', ',', '\x5', '\x2', '\x2', '\x2', 
		'*', '+', '\a', '\x6', '\x2', '\x2', '+', '-', '\x5', '\x2', '\x2', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\n', '\x2', '\x2', 
		'/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\v', '\x2', 
		'\x2', '\x31', '\v', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\v', '\x2', '\x2', '\x33', '\r', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\v', '\x2', '\x2', '\x35', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\v', '\x2', '\x2', '\x37', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x17', '\x1E', ',',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
