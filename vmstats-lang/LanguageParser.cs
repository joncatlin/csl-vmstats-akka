//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, ID=5, WHITESPACE=6, NEWLINE=7, PATTERN=8;
	public const int
		RULE_statement = 0, RULE_line = 1, RULE_vm_selection = 2, RULE_analysis = 3, 
		RULE_stats_name = 4, RULE_route = 5, RULE_end_point = 6;
	public static readonly string[] ruleNames = {
		"statement", "line", "vm_selection", "analysis", "stats_name", "route", 
		"end_point"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'\\'", "'->'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "ID", "WHITESPACE", "NEWLINE", "PATTERN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LanguageParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14; line();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public Vm_selectionContext vm_selection() {
			return GetRuleContext<Vm_selectionContext>(0);
		}
		public AnalysisContext analysis() {
			return GetRuleContext<AnalysisContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(LanguageParser.NEWLINE, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; vm_selection();
			State = 22; Match(T__0);
			State = 23; analysis();
			State = 24; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vm_selectionContext : ParserRuleContext {
		public ITerminalNode PATTERN() { return GetToken(LanguageParser.PATTERN, 0); }
		public Vm_selectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vm_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVm_selection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVm_selection(this);
		}
	}

	[RuleVersion(0)]
	public Vm_selectionContext vm_selection() {
		Vm_selectionContext _localctx = new Vm_selectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_vm_selection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(T__1);
			State = 27; Match(PATTERN);
			State = 28; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalysisContext : ParserRuleContext {
		public Stats_nameContext stats_name() {
			return GetRuleContext<Stats_nameContext>(0);
		}
		public RouteContext route() {
			return GetRuleContext<RouteContext>(0);
		}
		public AnalysisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analysis; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAnalysis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAnalysis(this);
		}
	}

	[RuleVersion(0)]
	public AnalysisContext analysis() {
		AnalysisContext _localctx = new AnalysisContext(Context, State);
		EnterRule(_localctx, 6, RULE_analysis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; stats_name();
			State = 31; Match(T__2);
			State = 32; route();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stats_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public Stats_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stats_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterStats_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitStats_name(this);
		}
	}

	[RuleVersion(0)]
	public Stats_nameContext stats_name() {
		Stats_nameContext _localctx = new Stats_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_stats_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RouteContext : ParserRuleContext {
		public Stats_nameContext stats_name() {
			return GetRuleContext<Stats_nameContext>(0);
		}
		public End_pointContext end_point() {
			return GetRuleContext<End_pointContext>(0);
		}
		public RouteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_route; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRoute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRoute(this);
		}
	}

	[RuleVersion(0)]
	public RouteContext route() {
		RouteContext _localctx = new RouteContext(Context, State);
		EnterRule(_localctx, 10, RULE_route);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; stats_name();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; end_point();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_pointContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public End_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_point; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterEnd_point(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitEnd_point(this);
		}
	}

	[RuleVersion(0)]
	public End_pointContext end_point() {
		End_pointContext _localctx = new End_pointContext(Context, State);
		EnterRule(_localctx, 12, RULE_end_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__3);
			State = 41; Match(ID);
			State = 42; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '/', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x6', '\x2', '\x12', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x13', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', ')', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x2', '\x2', '\x2', ')', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\b', ' ', '\x3', '\x2', '\x2', '\x2', '\n', '$', '\x3', '\x2', 
		'\x2', '\x2', '\f', '(', '\x3', '\x2', '\x2', '\x2', '\xE', '*', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x12', '\x5', '\x4', '\x3', '\x2', '\x11', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x16', '\a', '\x2', '\x2', '\x3', '\x16', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x18', '\x5', '\x6', '\x4', '\x2', '\x18', '\x19', '\a', 
		'\x3', '\x2', '\x2', '\x19', '\x1A', '\x5', '\b', '\x5', '\x2', '\x1A', 
		'\x1B', '\a', '\t', '\x2', '\x2', '\x1B', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1D', '\a', '\x4', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'\n', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x4', '\x2', '\x2', '\x1F', 
		'\a', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', '\n', '\x6', '\x2', 
		'!', '\"', '\a', '\x5', '\x2', '\x2', '\"', '#', '\x5', '\f', '\a', '\x2', 
		'#', '\t', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\a', '\x2', '\x2', 
		'%', '\v', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x5', '\n', '\x6', '\x2', 
		'\'', ')', '\x5', '\xE', '\b', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', 
		'(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\r', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\x6', '\x2', '\x2', '+', ',', '\a', '\a', '\x2', 
		'\x2', ',', '-', '\a', '\x6', '\x2', '\x2', '-', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x13', '(',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
